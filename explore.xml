<krpano>

    <!-- 
        
        top ui bar 
        
     -->


    <layer name="ui_bar" style="ui_bar_style_explore">
        <layer if="debugmode == true" interactivecontent="true" name="debug_button" type="text" html="!" y="10" x="145" scale=".16" onclick="toggle_debug();" bgcolor="0x000000" bgalpha=".2" css="font-family:Arial; font-size:11px; color:#FFFFFF;" padding="4" bgborder="1 0xffffff 1" />
        <layer name="home_button" style="ui_icon_style" url="skin/%$skin%/home.png" x="15" onclick="plugin[scene].go_home()" />
        <layer name="tour_button" style="ui_icon_style" url="skin/%$skin%/tour_off.png" y="9" x="40" onclick="toggle_tour()" />
        <layer name="floor_text" style="floortext_style" x="110" align="right" onclick="plugin[scene].floor_menu();" />
        <layer name="tower_text" style="towertext_style" x="200" align="right" onclick="plugin[scene].tower_menu();" />
        <!-- <layer name="floor_menu" scale=".2" x="85" align="right" url="skin/%$skin%/hamburger.png" onclick="plugin[overlay].show_items_taketwo(get(scene_name), get(scene[get(scene_name)].floor_id));" /> -->
        <layer name="items_but" scale=".2" x="55" align="right" url="skin/%$skin%/feature_menu.png" onclick="plugin[overlay].show_item_lib(get(scene_name), get(scene[get(scene_name)].floor_id));" />
        <layer name="video_lib" scale=".05" align="right" x="15" url="skin/%$skin%/play.png" onclick="plugin[overlay].show_vid_lib();" />
        <!-- <layer name="timer" style="floortext_style" align="center" handcursor="false" alpha=".75" html="00:00:00" /> -->

    </layer>

    <action name="hud_focus" args="fov" scope="local">
        <!-- these are turned off in app.xml in hide_hotspots -->
        gyro_off();
        looktohotspot(get(caller.name),get(fov));
        gyro_on();
        
     
        <!-- set(caller.alpha, .5); -->
        <!-- set(caller.enabled, false); -->

    </action>


    <!-- the minimap -->
    <!-- <hotspot name="map_grid" style="map_grid" />
    <layer name="minimap_container" style="minimap_container_style" visible="false">
        <layer name="clicker" style="clicker" />
        <layer name="minimap_clipped" style="minimap_clipped_style" scale=".5" />
        <layer name="mini_map_spot" style="mapspot" />
    </layer>
	<layer name="map_closer" style="map_close_but" /> -->

    <action name="find_item" args="item" scope="local">
        <!-- set(layer[minimap_container].visible, false); -->
		gyro_off();
		set(events.onblendcomplete, shoosh_finished);
		search_for_item(get(scene_name), get(item));
		shoosh_callback(get(scene_name));
    </action>

    <action name="street_sign" args="name,ath" scope="local">
        addhotspot(auto, s);
        s.loadstyle(street_sign);
        set(s.html, get(name));
        set(s.ath, get(ath));
    </action>

    <action name="finish_shoosh" args="item" scope="local">
        <!-- plugin[scene].generate_global_positions(get(scene_name)); -->
        <!-- trace("finish shoosh"); -->
        <!-- trace(get(item)); -->
		set(events.onblendcomplete, blend_finished);
        set(t, get(item));
        set(hs,get(hotspot[get(t)]));
		set(fov, get(view.fov));
		if(get(hs.fov) != null , set(fov, get(hs.fov)), set(fov, get(view.fov) ));
		if(get(item) != null
        ,
            lookto(get(hs.ath),get(hs.atv),get(view.fov),tween(easeoutcubic,.5),true,true,gyro_on());
        ,
        	gyro_on();
        );

		plugin[scene].update_floor_map(get(scene_name));
        plugin[scene].init_scene();
        show_local_floorspots();
        preload_local(get(scene_name));
        set(layer[minimap_container].visible, true);
		set(hotspot[nadir_spot].visible, true);

    </action>


    <action name="mode_startup">
        <!-- gyro_on(); -->
		set(global.spawn_scene, get(scene[get(scene_name)].name));
        loadscene(get(startscene), null, MERGE|KEEPVIEW, BLEND(0.5, default));
		copy(global.start_x, global.current_x);
		copy(global.start_z, global.current_z);
		delayedcall(.5, set(layer[minimap_container].visible, true));
		delayedcall(.5, layer[overlay].show_welcome('welcome_screen'));

		                <!-- delayedcall(.5, open_welcome_poi('welcome_screen')); -->
        <!-- open_welcome_poi('welcome_screen'); -->
    </action>

    <action name="init_scene" scope="local">
        plugin[scene].init_scene();
        show_local_floorspots();
        preload_local(get(scene_name));
		set(hotspot[nadir_spot].visible, true);

        gyro_on();
        
    </action>

    <action name="show_local_floorspots" scope="local">
        for(set(i,0), i LT hotspot.count, inc(i),
        <!-- trace(hotspot[get(i)].style); -->
			if(get(hotspot[get(i)].style) == 'arch'
			,
				set(hotspot[get(i)].visible, true);
				set(hotspot[get(i)].enabled, true);
			);
        );
		<!-- updatescreen(); -->
    </action>

        <!-- <action name="show_local_floorspots" scope="local">
        for(set(i,0), i LT hotspot.count, inc(i),
            copy(hs, hotspot[get(i)]);
            set(hs.visible, true);
            set(hs.enabled, true);
        );
    </action> -->


    <!-- 
        
        Make fkloorspots and bridge nav

     -->



    <action name="add_exit_floor" scope="local">
		addhotspot('exit_button', ef);
        ef.loadstyle(exit_floor_button);
        set(ef.ath, get(hotspot[stairwell].ath));
    </action>

    <action name="make_vert_nav" scope="local" args="ox,oz,oy,name">

        <!-- dont make a floorspot its not needed here -->
        set(cs, get(scene[get(scene_name)]));
        set(sc, get(plugin[scene]));
        txtadd(txt, get(name), '_vert_nav');
		addhotspot(get(txt), vn);
                        <!-- get the ath for the nav from the stairwell hotspot -->
        set(ath, get(hotspot[stairwell].ath));
                        <!-- return  current_elev,next_elev -->
        sc.set_elevations(get(cs.floor_id),get(scene[get(name)].floor_id));
                        <!-- 
            set a new y for use in tranision in next_scene function
        -->
        set(vn.y, calc(sc.current_elev-sc.next_elev));
                        <!-- set(global.ay, calc(sc.current_elev-sc.next_elev)); -->
        if(sc.current_elev GT sc.next_elev
        ,
            vn.loadstyle(arrow_down);
            set(vn.ath,calc(number(get(ath))+number(get(vn.ath))));
            if (cs.door != null,add_exit_floor(get(cs.exit)));
        ,
            if (get(vn.y) == 0
            ,
                vn.loadstyle(arch);
            ,
                vn.loadstyle(arrow_up);
            );
            set(vn.ath,calc(number(get(ath))+number(get(vn.ath))));
            if (cs.door != null,add_exit_floor(get(cs.exit)));

        );

		set(vn.linkedscene, get(name));

    </action>
    <!-- 
    <action name="make_floorspot" scope="local" args="ox,oz,oy,name,chi,a">

		addhotspot(get(name), hs);
		hs.loadstyle(floorspot);
		set(hs.tx, get(ox));
		set(hs.tz, get(oz));
		set(hs.ry, get(a));
		calc(hs.ty, calc(number(get(oy))+number(get(floor_height))));
		set(hs.linkedscene, get(name));

        txtadd(txt, get(name), '_arch');
		addhotspot(get(txt), ar);
        ar.loadstyle(arch);
		set(ar.ath,get(a));
		set(ar.linkedscene, get(name));

		set(door, scene[get(name)].door);
		if (get(door)
		,
		set(ar.url, "../app-v1_2/skin/ak/exit_symbol.png");
		set(ar.width, "300");
		set(ar.height, "500");
		set(ar.alpha, 1);
		set(ar.onover, "tween(scale,1.2)");
		set(ar.onout, "tween(scale,1)");
		);

    </action> -->

    <!-- <action name="make_floorspot" scope="local" args="ox,oz,oy,name,chi,a">




        addhotspot(get(name), hs);
        hs.loadstyle(floorspot);

        set(va, get(hotspot[get(name)]));
  
        set(hs.tx, get(ox));
        set(hs.tz, get(oz));
        set(hs.ry, get(a));
        calc(hs.ty, calc(number(get(oy))+number(get(floor_height))));
        set(hs.linkedscene, get(name));


        txtadd(txt, get(name), '_arch');
        addhotspot(get(txt), ar);

        if(get(va.archstyle) == null
        ,
        ar.loadstyle(arch);

        ,
        assignstyle(ar, get(va.archstyle));
        );



        set(ar.ath,get(a));
        set(ar.linkedscene, get(name));
        set(door, scene[get(name)].door);
        if (get(door)
        ,
        set(ar.url, "../app-v1_2/skin/ak/exit_symbol.png");
        set(ar.width, "300");
        set(ar.height, "500");
        set(ar.alpha, 1);
        set(ar.onover, "tween(scale,1.2)");
        set(ar.onout, "tween(scale,1)");
        );



    </action> -->


    <action name="make_floorspot" scope="local" args="ox,oz,oy,name,chi,a,p">

        addhotspot(get(name), hs);
        hs.loadstyle(floorspot);
        set(va, get(hotspot[get(name)]));
 
        set(hs.tx, get(ox));
        set(hs.tz, get(oz));
        set(hs.ry, get(a));
        calc(hs.ty, calc(number(get(oy))+number(get(floor_height))));
        set(hs.linkedscene, get(name));
        txtadd(txt, get(name), '_arch');
        addhotspot(get(txt), ar);

        if (get(p) != null
        
        ,
            if (get(scene[get(scene_name)].parent_style) != null
            ,
                ar.loadstyle(get(scene[get(scene_name)].parent_style));
            ,
                ar.loadstyle(arch);
            );

       ,
            if(get(va.archstyle) == null
            ,
                ar.loadstyle(arch);
            ,
               ar.loadstyle(get(va.archstyle));
            );

        );
        set(ar.ath,get(a));
        set(ar.linkedscene, get(name));

        
    </action>
    
    <action name="make_floorspot_old" scope="local" args="ox,oz,oy,name,chi,a,p">

        addhotspot(get(name), hs);
        hs.loadstyle(floorspot);
        set(va, get(hotspot[get(name)]));
  
        set(hs.tx, get(ox));
        set(hs.tz, get(oz));
        set(hs.ry, get(a));
        calc(hs.ty, calc(number(get(oy))+number(get(floor_height))));
        set(hs.linkedscene, get(name));
        txtadd(txt, get(name), '_arch');
        addhotspot(get(txt), ar);

        <!-- trace("parent style");
        trace(get(scene[get(scene_name)].parent_style));
        trace("arch style");
        trace(get(va.archstyle)); -->
        trace("name");
        trace(get(name));
        if (get(name) != null
        ,
        trace("name")
            <!-- if (get(scene[get(scene_name)].parent_style)  != null
            ,
                ar.loadstyle(get(scene[get(scene_name)].parent_style));
            ,
                ar.loadstyle(arch);
            ); -->
        ,
        <!-- trace("no name") -->
            if(get(va.archstyle) == null
            ,
                ar.loadstyle(arch);
            ,
                ar.loadstyle(get(va.archstyle));
            );
        );


        set(ar.ath,get(a));
        set(ar.linkedscene, get(name));
        <!-- set(door, scene[get(name)].door);
        if (get(door)
        ,
        txtadd(new_txt, "../", get(app_version), "/skin/ak/exit_symbol.png");
        set(ar.url,  get(new_txt));
        set(ar.width, "300");
        set(ar.height, "500");
        set(ar.alpha, 1);
        set(ar.onover, "tween(scale,1.2)");
        set(ar.onout, "tween(scale,1)");
        ); -->

    </action>

    <!-- setup first scene  -->
    <events name="tourevents" keep="true" onxmlcomplete="setup_first_scene" />
    <action name="setup_first_scene">
        <!-- set(view, tx=0, ty=0, tz=0, fovmax=140, fovmin=40, fov=120); -->
		set(view, tx=0, ty=0, tz=0);
		set(events[tourevents].onxmlcomplete, null);
		set(events[tourevents].onloadcomplete, tween(view.tx|view.ty|view.tz, '0|0|0', 1, easeinoutquart));

    </action>

    <action name="teleport_to_scene" args="scene,item" scope="local">
		if (get(item) != "null"
		,
		set(global.scene_name, get(scene));
		loadscene(get(scene), null, MERGE|KEEPVIEW,BLEND(1, default),
			plugin[scene].update_current_map(get(scene_name));


		    plugin[scene].get_path_local(get(scene_name));
		    init_scene();

		);
        delayedcall(1.2,
            set(fov, get(view.fov));
		    if(hotspot[get(item)].fov != null , set(fov, get(hotspot[get(item)].fov)) );
		    if(get(item) != null, looktohotspot(get(item),get(fov)));)
		,
			loadscene(get(scene_name), null, MERGE|KEEPVIEW, BLEND(.1, default),
            		
		);
	</action>

	<action name="find_item_teleport" args="item" scope="local">
		gyro_off();
		search_for_item_teleport(get(scene_name), get(item));
		plugin[tour].set_query(get(item));
		set(fov, get(view.fov));
		if(hotspot[get(item)].fov != null , set(fov, get(hotspot[get(item)].fov)) );
		if(get(item) != null, looktohotspot(get(item),get(fov)));
		plugin[scene].get_path_local(get(scene_name));
		init_scene();
       

	</action>



</krpano>